// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="trace_cntrl_32_trace_cntrl_32,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-i,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.016000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=388,HLS_SYN_LUT=543,HLS_VERSION=2020_2}" *)

module trace_cntrl_32 (
        ap_clk,
        ap_rst_n,
        trace_32_TDATA,
        trace_32_TVALID,
        trace_32_TREADY,
        trace_32_TKEEP,
        trace_32_TSTRB,
        trace_32_TUSER,
        trace_32_TLAST,
        trace_32_TID,
        trace_32_TDEST,
        capture_32_TDATA,
        capture_32_TVALID,
        capture_32_TREADY,
        capture_32_TKEEP,
        capture_32_TSTRB,
        capture_32_TUSER,
        capture_32_TLAST,
        capture_32_TID,
        capture_32_TDEST,
        s_axi_trace_cntrl_AWVALID,
        s_axi_trace_cntrl_AWREADY,
        s_axi_trace_cntrl_AWADDR,
        s_axi_trace_cntrl_WVALID,
        s_axi_trace_cntrl_WREADY,
        s_axi_trace_cntrl_WDATA,
        s_axi_trace_cntrl_WSTRB,
        s_axi_trace_cntrl_ARVALID,
        s_axi_trace_cntrl_ARREADY,
        s_axi_trace_cntrl_ARADDR,
        s_axi_trace_cntrl_RVALID,
        s_axi_trace_cntrl_RREADY,
        s_axi_trace_cntrl_RDATA,
        s_axi_trace_cntrl_RRESP,
        s_axi_trace_cntrl_BVALID,
        s_axi_trace_cntrl_BREADY,
        s_axi_trace_cntrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;
parameter    C_S_AXI_TRACE_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_TRACE_CNTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_TRACE_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] trace_32_TDATA;
input   trace_32_TVALID;
output   trace_32_TREADY;
input  [3:0] trace_32_TKEEP;
input  [3:0] trace_32_TSTRB;
input  [0:0] trace_32_TUSER;
input  [0:0] trace_32_TLAST;
input  [0:0] trace_32_TID;
input  [0:0] trace_32_TDEST;
output  [31:0] capture_32_TDATA;
output   capture_32_TVALID;
input   capture_32_TREADY;
output  [3:0] capture_32_TKEEP;
output  [3:0] capture_32_TSTRB;
output  [0:0] capture_32_TUSER;
output  [0:0] capture_32_TLAST;
output  [0:0] capture_32_TID;
output  [0:0] capture_32_TDEST;
input   s_axi_trace_cntrl_AWVALID;
output   s_axi_trace_cntrl_AWREADY;
input  [C_S_AXI_TRACE_CNTRL_ADDR_WIDTH - 1:0] s_axi_trace_cntrl_AWADDR;
input   s_axi_trace_cntrl_WVALID;
output   s_axi_trace_cntrl_WREADY;
input  [C_S_AXI_TRACE_CNTRL_DATA_WIDTH - 1:0] s_axi_trace_cntrl_WDATA;
input  [C_S_AXI_TRACE_CNTRL_WSTRB_WIDTH - 1:0] s_axi_trace_cntrl_WSTRB;
input   s_axi_trace_cntrl_ARVALID;
output   s_axi_trace_cntrl_ARREADY;
input  [C_S_AXI_TRACE_CNTRL_ADDR_WIDTH - 1:0] s_axi_trace_cntrl_ARADDR;
output   s_axi_trace_cntrl_RVALID;
input   s_axi_trace_cntrl_RREADY;
output  [C_S_AXI_TRACE_CNTRL_DATA_WIDTH - 1:0] s_axi_trace_cntrl_RDATA;
output  [1:0] s_axi_trace_cntrl_RRESP;
output   s_axi_trace_cntrl_BVALID;
input   s_axi_trace_cntrl_BREADY;
output  [1:0] s_axi_trace_cntrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] trigger;
wire   [31:0] length_r;
reg    trace_32_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln28_fu_181_p2;
reg    capture_32_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln28_reg_281;
reg   [0:0] match_1_reg_315;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] match_reg_137;
reg   [31:0] i_reg_148;
reg   [31:0] length_read_reg_265;
reg   [31:0] trigger_read_reg_270;
wire   [31:0] sub_fu_170_p2;
reg   [31:0] sub_reg_276;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op64_write_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] trace_temp_data_V_reg_285;
reg   [3:0] tmp_i_keep_reg_290;
reg   [3:0] tmp_i_strb_reg_295;
reg   [0:0] tmp_i_user_reg_300;
reg   [0:0] tmp_i_id_reg_305;
reg   [0:0] tmp_i_dest_reg_310;
wire   [0:0] match_1_fu_220_p2;
wire   [31:0] i_2_fu_226_p2;
reg    ap_predicate_op58_write_state3;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] i_3_fu_252_p2;
reg   [31:0] i_3_reg_330;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] ap_phi_mux_match_phi_fu_141_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_152_p4;
reg   [31:0] ap_phi_reg_pp0_iter0_i_1_reg_160;
reg   [31:0] samples_fu_78;
wire   [31:0] samples_1_fu_241_p2;
reg    ap_block_pp0_stage1_01001;
wire   [31:0] and_ln31_fu_210_p2;
wire   [0:0] icmp_ln31_fu_215_p2;
wire    ap_CS_fsm_state5;
wire    regslice_both_capture_32_V_data_V_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_trace_32_V_data_V_U_apdone_blk;
wire   [31:0] trace_32_TDATA_int_regslice;
wire    trace_32_TVALID_int_regslice;
reg    trace_32_TREADY_int_regslice;
wire    regslice_both_trace_32_V_data_V_U_ack_in;
wire    regslice_both_trace_32_V_keep_V_U_apdone_blk;
wire   [3:0] trace_32_TKEEP_int_regslice;
wire    regslice_both_trace_32_V_keep_V_U_vld_out;
wire    regslice_both_trace_32_V_keep_V_U_ack_in;
wire    regslice_both_trace_32_V_strb_V_U_apdone_blk;
wire   [3:0] trace_32_TSTRB_int_regslice;
wire    regslice_both_trace_32_V_strb_V_U_vld_out;
wire    regslice_both_trace_32_V_strb_V_U_ack_in;
wire    regslice_both_trace_32_V_user_V_U_apdone_blk;
wire   [0:0] trace_32_TUSER_int_regslice;
wire    regslice_both_trace_32_V_user_V_U_vld_out;
wire    regslice_both_trace_32_V_user_V_U_ack_in;
wire    regslice_both_trace_32_V_last_V_U_apdone_blk;
wire   [0:0] trace_32_TLAST_int_regslice;
wire    regslice_both_trace_32_V_last_V_U_vld_out;
wire    regslice_both_trace_32_V_last_V_U_ack_in;
wire    regslice_both_trace_32_V_id_V_U_apdone_blk;
wire   [0:0] trace_32_TID_int_regslice;
wire    regslice_both_trace_32_V_id_V_U_vld_out;
wire    regslice_both_trace_32_V_id_V_U_ack_in;
wire    regslice_both_trace_32_V_dest_V_U_apdone_blk;
wire   [0:0] trace_32_TDEST_int_regslice;
wire    regslice_both_trace_32_V_dest_V_U_vld_out;
wire    regslice_both_trace_32_V_dest_V_U_ack_in;
reg    capture_32_TVALID_int_regslice;
wire    capture_32_TREADY_int_regslice;
wire    regslice_both_capture_32_V_data_V_U_vld_out;
wire    regslice_both_capture_32_V_keep_V_U_apdone_blk;
wire    regslice_both_capture_32_V_keep_V_U_ack_in_dummy;
wire    regslice_both_capture_32_V_keep_V_U_vld_out;
wire    regslice_both_capture_32_V_strb_V_U_apdone_blk;
wire    regslice_both_capture_32_V_strb_V_U_ack_in_dummy;
wire    regslice_both_capture_32_V_strb_V_U_vld_out;
wire    regslice_both_capture_32_V_user_V_U_apdone_blk;
wire    regslice_both_capture_32_V_user_V_U_ack_in_dummy;
wire    regslice_both_capture_32_V_user_V_U_vld_out;
wire    regslice_both_capture_32_V_last_V_U_apdone_blk;
wire   [0:0] capture_32_TLAST_int_regslice;
wire    regslice_both_capture_32_V_last_V_U_ack_in_dummy;
wire    regslice_both_capture_32_V_last_V_U_vld_out;
wire    regslice_both_capture_32_V_id_V_U_apdone_blk;
wire    regslice_both_capture_32_V_id_V_U_ack_in_dummy;
wire    regslice_both_capture_32_V_id_V_U_vld_out;
wire    regslice_both_capture_32_V_dest_V_U_apdone_blk;
wire    regslice_both_capture_32_V_dest_V_U_ack_in_dummy;
wire    regslice_both_capture_32_V_dest_V_U_vld_out;
reg    ap_condition_168;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

trace_cntrl_32_trace_cntrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TRACE_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TRACE_CNTRL_DATA_WIDTH ))
trace_cntrl_s_axi_U(
    .AWVALID(s_axi_trace_cntrl_AWVALID),
    .AWREADY(s_axi_trace_cntrl_AWREADY),
    .AWADDR(s_axi_trace_cntrl_AWADDR),
    .WVALID(s_axi_trace_cntrl_WVALID),
    .WREADY(s_axi_trace_cntrl_WREADY),
    .WDATA(s_axi_trace_cntrl_WDATA),
    .WSTRB(s_axi_trace_cntrl_WSTRB),
    .ARVALID(s_axi_trace_cntrl_ARVALID),
    .ARREADY(s_axi_trace_cntrl_ARREADY),
    .ARADDR(s_axi_trace_cntrl_ARADDR),
    .RVALID(s_axi_trace_cntrl_RVALID),
    .RREADY(s_axi_trace_cntrl_RREADY),
    .RDATA(s_axi_trace_cntrl_RDATA),
    .RRESP(s_axi_trace_cntrl_RRESP),
    .BVALID(s_axi_trace_cntrl_BVALID),
    .BREADY(s_axi_trace_cntrl_BREADY),
    .BRESP(s_axi_trace_cntrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .trigger(trigger),
    .length_r(length_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 32 ))
regslice_both_trace_32_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TDATA),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_data_V_U_ack_in),
    .data_out(trace_32_TDATA_int_regslice),
    .vld_out(trace_32_TVALID_int_regslice),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_data_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 4 ))
regslice_both_trace_32_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TKEEP),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_keep_V_U_ack_in),
    .data_out(trace_32_TKEEP_int_regslice),
    .vld_out(regslice_both_trace_32_V_keep_V_U_vld_out),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_keep_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 4 ))
regslice_both_trace_32_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TSTRB),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_strb_V_U_ack_in),
    .data_out(trace_32_TSTRB_int_regslice),
    .vld_out(regslice_both_trace_32_V_strb_V_U_vld_out),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_strb_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_trace_32_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TUSER),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_user_V_U_ack_in),
    .data_out(trace_32_TUSER_int_regslice),
    .vld_out(regslice_both_trace_32_V_user_V_U_vld_out),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_user_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_trace_32_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TLAST),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_last_V_U_ack_in),
    .data_out(trace_32_TLAST_int_regslice),
    .vld_out(regslice_both_trace_32_V_last_V_U_vld_out),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_last_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_trace_32_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TID),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_id_V_U_ack_in),
    .data_out(trace_32_TID_int_regslice),
    .vld_out(regslice_both_trace_32_V_id_V_U_vld_out),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_id_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_trace_32_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_32_TDEST),
    .vld_in(trace_32_TVALID),
    .ack_in(regslice_both_trace_32_V_dest_V_U_ack_in),
    .data_out(trace_32_TDEST_int_regslice),
    .vld_out(regslice_both_trace_32_V_dest_V_U_vld_out),
    .ack_out(trace_32_TREADY_int_regslice),
    .apdone_blk(regslice_both_trace_32_V_dest_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 32 ))
regslice_both_capture_32_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(trace_temp_data_V_reg_285),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(capture_32_TREADY_int_regslice),
    .data_out(capture_32_TDATA),
    .vld_out(regslice_both_capture_32_V_data_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_data_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 4 ))
regslice_both_capture_32_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_i_keep_reg_290),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(regslice_both_capture_32_V_keep_V_U_ack_in_dummy),
    .data_out(capture_32_TKEEP),
    .vld_out(regslice_both_capture_32_V_keep_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_keep_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 4 ))
regslice_both_capture_32_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_i_strb_reg_295),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(regslice_both_capture_32_V_strb_V_U_ack_in_dummy),
    .data_out(capture_32_TSTRB),
    .vld_out(regslice_both_capture_32_V_strb_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_strb_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_capture_32_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_i_user_reg_300),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(regslice_both_capture_32_V_user_V_U_ack_in_dummy),
    .data_out(capture_32_TUSER),
    .vld_out(regslice_both_capture_32_V_user_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_user_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_capture_32_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(capture_32_TLAST_int_regslice),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(regslice_both_capture_32_V_last_V_U_ack_in_dummy),
    .data_out(capture_32_TLAST),
    .vld_out(regslice_both_capture_32_V_last_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_last_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_capture_32_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_i_id_reg_305),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(regslice_both_capture_32_V_id_V_U_ack_in_dummy),
    .data_out(capture_32_TID),
    .vld_out(regslice_both_capture_32_V_id_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_id_V_U_apdone_blk)
);

trace_cntrl_32_regslice_both #(
    .DataWidth( 1 ))
regslice_both_capture_32_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_i_dest_reg_310),
    .vld_in(capture_32_TVALID_int_regslice),
    .ack_in(regslice_both_capture_32_V_dest_V_U_ack_in_dummy),
    .data_out(capture_32_TDEST),
    .vld_out(regslice_both_capture_32_V_dest_V_U_vld_out),
    .ack_out(capture_32_TREADY),
    .apdone_blk(regslice_both_capture_32_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_168)) begin
        if ((match_1_fu_220_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_i_1_reg_160 <= i_2_fu_226_p2;
        end else if ((match_1_fu_220_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_i_1_reg_160 <= ap_phi_mux_i_phi_fu_152_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_148 <= i_3_reg_330;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_148 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        match_reg_137 <= match_1_reg_315;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        match_reg_137 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        samples_fu_78 <= 32'd0;
    end else if (((match_1_reg_315 == 1'd1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        samples_fu_78 <= samples_1_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_3_reg_330 <= i_3_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln28_reg_281 <= icmp_ln28_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        length_read_reg_265 <= length_r;
        sub_reg_276 <= sub_fu_170_p2;
        trigger_read_reg_270 <= trigger;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        match_1_reg_315 <= match_1_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_dest_reg_310 <= trace_32_TDEST_int_regslice;
        tmp_i_id_reg_305 <= trace_32_TID_int_regslice;
        tmp_i_keep_reg_290 <= trace_32_TKEEP_int_regslice;
        tmp_i_strb_reg_295 <= trace_32_TSTRB_int_regslice;
        tmp_i_user_reg_300 <= trace_32_TUSER_int_regslice;
        trace_temp_data_V_reg_285 <= trace_32_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((icmp_ln28_fu_181_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_capture_32_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_152_p4 = i_3_reg_330;
    end else begin
        ap_phi_mux_i_phi_fu_152_p4 = i_reg_148;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_match_phi_fu_141_p4 = match_1_reg_315;
    end else begin
        ap_phi_mux_match_phi_fu_141_p4 = match_reg_137;
    end
end

always @ (*) begin
    if (((regslice_both_capture_32_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (match_1_reg_315 == 1'd1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((match_1_reg_315 == 1'd1) & (icmp_ln28_reg_281 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        capture_32_TDATA_blk_n = capture_32_TREADY_int_regslice;
    end else begin
        capture_32_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op58_write_state3 == 1'b1))) begin
        capture_32_TVALID_int_regslice = 1'b1;
    end else begin
        capture_32_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_32_TDATA_blk_n = trace_32_TVALID_int_regslice;
    end else begin
        trace_32_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_32_TREADY_int_regslice = 1'b1;
    end else begin
        trace_32_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln28_fu_181_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln28_fu_181_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_capture_32_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln31_fu_210_p2 = (trigger_read_reg_270 & trace_32_TDATA_int_regslice);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op64_write_state4 == 1'b1)))) | ((icmp_ln28_fu_181_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trace_32_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op64_write_state4 == 1'b1)))) | ((icmp_ln28_fu_181_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trace_32_TVALID_int_regslice == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op58_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op58_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op58_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln28_fu_181_p2 == 1'd1) & (trace_32_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op58_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op58_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op64_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((capture_32_TREADY_int_regslice == 1'b0) & (ap_predicate_op64_write_state4 == 1'b1));
end

always @ (*) begin
    ap_condition_168 = ((icmp_ln28_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op58_write_state3 = ((match_1_reg_315 == 1'd1) & (icmp_ln28_reg_281 == 1'd1));
end

always @ (*) begin
    ap_predicate_op64_write_state4 = ((match_1_reg_315 == 1'd1) & (icmp_ln28_reg_281 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign capture_32_TLAST_int_regslice = ((samples_fu_78 == sub_reg_276) ? 1'b1 : 1'b0);

assign capture_32_TVALID = regslice_both_capture_32_V_data_V_U_vld_out;

assign i_2_fu_226_p2 = ($signed(ap_phi_mux_i_phi_fu_152_p4) + $signed(32'd4294967295));

assign i_3_fu_252_p2 = (ap_phi_reg_pp0_iter0_i_1_reg_160 + 32'd1);

assign icmp_ln28_fu_181_p2 = (($signed(ap_phi_mux_i_phi_fu_152_p4) < $signed(length_read_reg_265)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_215_p2 = ((and_ln31_fu_210_p2 == trigger_read_reg_270) ? 1'b1 : 1'b0);

assign match_1_fu_220_p2 = (icmp_ln31_fu_215_p2 | ap_phi_mux_match_phi_fu_141_p4);

assign samples_1_fu_241_p2 = (samples_fu_78 + 32'd1);

assign sub_fu_170_p2 = ($signed(length_r) + $signed(32'd4294967295));

assign trace_32_TREADY = regslice_both_trace_32_V_data_V_U_ack_in;

endmodule //trace_cntrl_32
