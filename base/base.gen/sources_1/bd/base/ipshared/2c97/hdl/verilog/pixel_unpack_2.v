// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pixel_unpack_2_pixel_unpack_2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-i,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.721000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=394,HLS_SYN_LUT=435,HLS_VERSION=2020_2}" *)

module pixel_unpack_2 (
        ap_clk,
        ap_rst_n,
        stream_in_64_TDATA,
        stream_in_64_TVALID,
        stream_in_64_TREADY,
        stream_in_64_TKEEP,
        stream_in_64_TSTRB,
        stream_in_64_TUSER,
        stream_in_64_TLAST,
        stream_out_48_TDATA,
        stream_out_48_TVALID,
        stream_out_48_TREADY,
        stream_out_48_TKEEP,
        stream_out_48_TSTRB,
        stream_out_48_TUSER,
        stream_out_48_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_pp0_stage0 = 20'd4;
parameter    ap_ST_fsm_pp0_stage1 = 20'd8;
parameter    ap_ST_fsm_state6 = 20'd16;
parameter    ap_ST_fsm_pp1_stage0 = 20'd32;
parameter    ap_ST_fsm_pp1_stage1 = 20'd64;
parameter    ap_ST_fsm_state10 = 20'd128;
parameter    ap_ST_fsm_pp2_stage0 = 20'd256;
parameter    ap_ST_fsm_pp2_stage1 = 20'd512;
parameter    ap_ST_fsm_pp2_stage2 = 20'd1024;
parameter    ap_ST_fsm_pp2_stage3 = 20'd2048;
parameter    ap_ST_fsm_state16 = 20'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 20'd8192;
parameter    ap_ST_fsm_state19 = 20'd16384;
parameter    ap_ST_fsm_pp4_stage0 = 20'd32768;
parameter    ap_ST_fsm_pp4_stage1 = 20'd65536;
parameter    ap_ST_fsm_pp4_stage2 = 20'd131072;
parameter    ap_ST_fsm_pp4_stage3 = 20'd262144;
parameter    ap_ST_fsm_state27 = 20'd524288;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] stream_in_64_TDATA;
input   stream_in_64_TVALID;
output   stream_in_64_TREADY;
input  [7:0] stream_in_64_TKEEP;
input  [7:0] stream_in_64_TSTRB;
input  [0:0] stream_in_64_TUSER;
input  [0:0] stream_in_64_TLAST;
output  [47:0] stream_out_48_TDATA;
output   stream_out_48_TVALID;
input   stream_out_48_TREADY;
output  [5:0] stream_out_48_TKEEP;
output  [5:0] stream_out_48_TSTRB;
output  [0:0] stream_out_48_TUSER;
output  [0:0] stream_out_48_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] mode;
reg   [31:0] mode_0_data_reg;
reg    mode_0_vld_reg;
reg    mode_0_ack_out;
reg    stream_in_64_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_pp4_stage0;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_block_pp4_stage1;
wire    ap_CS_fsm_pp4_stage2;
wire    ap_block_pp4_stage2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    stream_out_48_TDATA_blk_n;
wire    ap_CS_fsm_pp4_stage3;
wire    ap_block_pp4_stage3;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_pp2_stage1;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] reg_273;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state7_pp1_stage0_iter0;
reg    ap_block_state9_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg   [7:0] reg_277;
reg    ap_block_state11_pp2_stage0_iter0;
reg    ap_block_state15_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
reg   [7:0] reg_281;
reg   [7:0] reg_285;
reg   [15:0] reg_289;
reg    ap_block_state20_pp4_stage0_iter0;
reg    ap_block_state24_pp4_stage0_iter1;
reg    ap_block_pp4_stage0_11001;
wire   [31:0] grp_read_fu_136_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_188_p1;
reg   [0:0] in_pixel_last_V_3_reg_558;
wire   [47:0] p_Result_3_fu_297_p6;
wire   [47:0] p_Result_46_1_fu_312_p6;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] in_pixel_last_V_2_reg_578;
wire   [47:0] zext_ln414_fu_351_p1;
wire   [47:0] zext_ln414_1_fu_366_p1;
reg    ap_block_state8_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [0:0] in_pixel_last_V_1_reg_598;
wire   [47:0] p_Result_5_fu_375_p5;
wire   [7:0] grp_fu_203_p4;
reg   [7:0] p_Result_30_1_reg_608;
wire   [7:0] grp_fu_193_p4;
reg   [7:0] p_Result_32_1_reg_613;
reg   [7:0] p_Result_30_2_reg_618;
wire   [47:0] p_Result_33_1_fu_398_p5;
reg    ap_block_state12_pp2_stage1_iter0;
reg    ap_block_pp2_stage1_11001;
wire   [47:0] p_Result_33_2_fu_409_p5;
reg    ap_block_state13_pp2_stage2_iter0;
reg    ap_block_pp2_stage2_11001;
wire   [47:0] p_Result_33_3_fu_421_p5;
reg    ap_block_state14_pp2_stage3_iter0;
reg    ap_block_pp2_stage3_11001;
reg    ap_block_state17_pp3_stage0_iter0;
reg    ap_block_state18_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [47:0] p_Result_s_fu_448_p3;
reg   [0:0] empty_reg_653_3;
reg   [0:0] empty_reg_653_4;
wire   [47:0] trunc_ln674_fu_457_p1;
reg   [47:0] trunc_ln674_reg_659;
reg   [0:0] empty_17_reg_664_3;
reg   [0:0] empty_17_reg_664_4;
reg    ap_block_state21_pp4_stage1_iter0;
reg    ap_block_state25_pp4_stage1_iter1;
reg    ap_block_pp4_stage1_11001;
wire   [31:0] trunc_ln674_1_fu_461_p1;
reg   [31:0] trunc_ln674_1_reg_670;
reg   [31:0] tmp_2_reg_675;
wire   [0:0] or_ln709_1_fu_501_p2;
reg    ap_block_state22_pp4_stage2_iter0;
reg    ap_block_state26_pp4_stage2_iter1;
reg    ap_block_pp4_stage2_11001;
wire   [0:0] last_4_fu_514_p2;
reg   [0:0] last_4_reg_685;
wire   [15:0] trunc_ln674_2_fu_520_p1;
reg   [15:0] trunc_ln674_2_reg_690;
reg   [47:0] p_Result_25_3_reg_695;
wire   [47:0] p_Result_25_1_fu_534_p3;
reg    ap_block_state23_pp4_stage3_iter0;
reg    ap_block_pp4_stage3_11001;
wire   [47:0] p_Result_25_2_fu_542_p3;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_block_pp1_stage0_subdone;
reg    ap_block_pp2_stage3_subdone;
reg    ap_condition_pp2_flush_enable;
reg    ap_block_pp2_stage0_subdone;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_block_pp4_stage3_subdone;
reg    ap_condition_pp4_flush_enable;
reg    ap_block_pp4_stage2_subdone;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_pp2_stage2_01001;
reg    ap_block_pp2_stage3_01001;
reg    ap_block_pp3_stage0_01001;
reg    ap_block_pp4_stage2_01001;
reg    ap_block_pp4_stage3_01001;
reg    ap_block_pp4_stage0_01001;
reg    ap_block_pp4_stage1_01001;
wire   [7:0] grp_fu_213_p4;
wire   [15:0] trunc_ln674_6_fu_293_p1;
wire   [15:0] p_Result_7_fu_331_p4;
wire   [15:0] trunc_ln674_5_fu_327_p1;
wire   [39:0] tmp_4_fu_341_p4;
wire   [39:0] tmp_5_fu_356_p4;
wire   [7:0] trunc_ln674_4_fu_371_p1;
wire   [23:0] p_Result_1_fu_438_p4;
wire   [23:0] trunc_ln674_3_fu_434_p1;
wire   [0:0] or_ln709_fu_495_p2;
wire   [0:0] or_ln28_fu_508_p2;
wire    ap_CS_fsm_state27;
wire    regslice_both_stream_out_48_V_data_V_U_apdone_blk;
reg   [19:0] ap_NS_fsm;
reg    ap_block_pp2_stage1_subdone;
reg    ap_block_pp2_stage2_subdone;
reg    ap_block_pp4_stage0_subdone;
reg    ap_block_pp4_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    regslice_both_stream_in_64_V_data_V_U_apdone_blk;
wire   [63:0] stream_in_64_TDATA_int_regslice;
wire    stream_in_64_TVALID_int_regslice;
reg    stream_in_64_TREADY_int_regslice;
wire    regslice_both_stream_in_64_V_data_V_U_ack_in;
wire    regslice_both_stream_in_64_V_keep_V_U_apdone_blk;
wire   [7:0] stream_in_64_TKEEP_int_regslice;
wire    regslice_both_stream_in_64_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_64_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_64_V_strb_V_U_apdone_blk;
wire   [7:0] stream_in_64_TSTRB_int_regslice;
wire    regslice_both_stream_in_64_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_64_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_64_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_64_TUSER_int_regslice;
wire    regslice_both_stream_in_64_V_user_V_U_vld_out;
wire    regslice_both_stream_in_64_V_user_V_U_ack_in;
wire    regslice_both_stream_in_64_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_64_TLAST_int_regslice;
wire    regslice_both_stream_in_64_V_last_V_U_vld_out;
wire    regslice_both_stream_in_64_V_last_V_U_ack_in;
reg   [47:0] stream_out_48_TDATA_int_regslice;
reg    stream_out_48_TVALID_int_regslice;
wire    stream_out_48_TREADY_int_regslice;
wire    regslice_both_stream_out_48_V_data_V_U_vld_out;
wire    regslice_both_stream_out_48_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_48_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_48_V_user_V_U_apdone_blk;
reg   [0:0] stream_out_48_TUSER_int_regslice;
wire    regslice_both_stream_out_48_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_user_V_U_vld_out;
wire    regslice_both_stream_out_48_V_last_V_U_apdone_blk;
reg   [0:0] stream_out_48_TLAST_int_regslice;
wire    regslice_both_stream_out_48_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 mode_0_data_reg = 32'd0;
#0 mode_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pixel_unpack_2_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode(mode)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_in_64_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_64_TDATA),
    .vld_in(stream_in_64_TVALID),
    .ack_in(regslice_both_stream_in_64_V_data_V_U_ack_in),
    .data_out(stream_in_64_TDATA_int_regslice),
    .vld_out(stream_in_64_TVALID_int_regslice),
    .ack_out(stream_in_64_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_64_V_data_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_64_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_64_TKEEP),
    .vld_in(stream_in_64_TVALID),
    .ack_in(regslice_both_stream_in_64_V_keep_V_U_ack_in),
    .data_out(stream_in_64_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_64_V_keep_V_U_vld_out),
    .ack_out(stream_in_64_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_64_V_keep_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_64_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_64_TSTRB),
    .vld_in(stream_in_64_TVALID),
    .ack_in(regslice_both_stream_in_64_V_strb_V_U_ack_in),
    .data_out(stream_in_64_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_64_V_strb_V_U_vld_out),
    .ack_out(stream_in_64_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_64_V_strb_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_64_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_64_TUSER),
    .vld_in(stream_in_64_TVALID),
    .ack_in(regslice_both_stream_in_64_V_user_V_U_ack_in),
    .data_out(stream_in_64_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_64_V_user_V_U_vld_out),
    .ack_out(stream_in_64_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_64_V_user_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_64_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_64_TLAST),
    .vld_in(stream_in_64_TVALID),
    .ack_in(regslice_both_stream_in_64_V_last_V_U_ack_in),
    .data_out(stream_in_64_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_64_V_last_V_U_vld_out),
    .ack_out(stream_in_64_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_64_V_last_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 48 ))
regslice_both_stream_out_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_48_TDATA_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(stream_out_48_TREADY_int_regslice),
    .data_out(stream_out_48_TDATA),
    .vld_out(regslice_both_stream_out_48_V_data_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_data_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 6 ))
regslice_both_stream_out_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(6'd0),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_48_TKEEP),
    .vld_out(regslice_both_stream_out_48_V_keep_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_keep_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 6 ))
regslice_both_stream_out_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(6'd0),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_48_TSTRB),
    .vld_out(regslice_both_stream_out_48_V_strb_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_strb_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_48_TUSER_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_48_TUSER),
    .vld_out(regslice_both_stream_out_48_V_user_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_user_V_U_apdone_blk)
);

pixel_unpack_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_48_TLAST_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_48_TLAST),
    .vld_out(regslice_both_stream_out_48_V_last_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_read_fu_136_p2 == 32'd4) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_read_fu_136_p2 == 32'd4) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_read_fu_136_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((grp_read_fu_136_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp2_flush_enable)) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_read_fu_136_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0)) | ((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((grp_read_fu_136_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((grp_read_fu_136_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((grp_read_fu_136_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp4_flush_enable)) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((grp_read_fu_136_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage3_subdone) & (1'b1 == ap_CS_fsm_pp4_stage3)))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if (((grp_read_fu_136_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        empty_17_reg_664_3 <= stream_in_64_TUSER_int_regslice;
        empty_17_reg_664_4 <= stream_in_64_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_reg_653_3 <= stream_in_64_TUSER_int_regslice;
        empty_reg_653_4 <= stream_in_64_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        in_pixel_last_V_1_reg_598 <= stream_in_64_TLAST_int_regslice;
        p_Result_30_1_reg_608 <= {{stream_in_64_TDATA_int_regslice[23:16]}};
        p_Result_32_1_reg_613 <= {{stream_in_64_TDATA_int_regslice[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        in_pixel_last_V_2_reg_578 <= stream_in_64_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_pixel_last_V_3_reg_558 <= stream_in_64_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        last_4_reg_685 <= last_4_fu_514_p2;
        p_Result_25_3_reg_695 <= {{stream_in_64_TDATA_int_regslice[63:16]}};
        trunc_ln674_2_reg_690 <= trunc_ln674_2_fu_520_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((mode_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mode_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (mode_0_vld_reg == 1'b0)))) begin
        mode_0_data_reg <= mode;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        p_Result_30_2_reg_618 <= {{stream_in_64_TDATA_int_regslice[39:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_273 <= {{stream_in_64_TDATA_int_regslice[47:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_277 <= {{stream_in_64_TDATA_int_regslice[63:56]}};
        reg_281 <= {{stream_in_64_TDATA_int_regslice[55:48]}};
        reg_285 <= {{stream_in_64_TDATA_int_regslice[47:40]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        reg_289 <= {{stream_in_64_TDATA_int_regslice[63:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        tmp_2_reg_675 <= {{stream_in_64_TDATA_int_regslice[63:32]}};
        trunc_ln674_1_reg_670 <= trunc_ln674_1_fu_461_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        trunc_ln674_reg_659 <= trunc_ln674_fu_457_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (in_pixel_last_V_3_reg_558 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_subdone) & (in_pixel_last_V_2_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage3_subdone) & (in_pixel_last_V_1_reg_598 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        ap_condition_pp2_flush_enable = 1'b1;
    end else begin
        ap_condition_pp2_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_subdone) & (grp_fu_188_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage3_subdone) & (last_4_reg_685 == 1'd1) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        ap_condition_pp4_flush_enable = 1'b1;
    end else begin
        ap_condition_pp4_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((regslice_both_stream_out_48_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state27)))) begin
        mode_0_ack_out = 1'b1;
    end else begin
        mode_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)))) begin
        stream_in_64_TDATA_blk_n = stream_in_64_TVALID_int_regslice;
    end else begin
        stream_in_64_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        stream_in_64_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_64_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)))) begin
        stream_out_48_TDATA_blk_n = stream_out_48_TREADY_int_regslice;
    end else begin
        stream_out_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1_01001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_25_3_reg_695;
    end else if (((1'b0 == ap_block_pp4_stage0_01001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_25_2_fu_542_p3;
    end else if (((1'b0 == ap_block_pp4_stage3_01001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
        stream_out_48_TDATA_int_regslice = p_Result_25_1_fu_534_p3;
    end else if (((1'b0 == ap_block_pp4_stage2_01001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        stream_out_48_TDATA_int_regslice = trunc_ln674_reg_659;
    end else if (((1'b0 == ap_block_pp3_stage0_01001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_s_fu_448_p3;
    end else if (((1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_33_3_fu_421_p5;
    end else if (((1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_33_2_fu_409_p5;
    end else if (((1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_33_1_fu_398_p5;
    end else if (((1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_5_fu_375_p5;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = zext_ln414_1_fu_366_p1;
    end else if (((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = zext_ln414_fu_351_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_46_1_fu_312_p6;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_out_48_TDATA_int_regslice = p_Result_3_fu_297_p6;
    end else begin
        stream_out_48_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1_01001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        stream_out_48_TLAST_int_regslice = last_4_reg_685;
    end else if (((1'b0 == ap_block_pp3_stage0_01001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        stream_out_48_TLAST_int_regslice = stream_in_64_TLAST_int_regslice;
    end else if (((1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_48_TLAST_int_regslice = in_pixel_last_V_1_reg_598;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stream_out_48_TLAST_int_regslice = in_pixel_last_V_2_reg_578;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_out_48_TLAST_int_regslice = in_pixel_last_V_3_reg_558;
    end else if ((((1'b0 == ap_block_pp4_stage0_01001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage3_01001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp4_stage2_01001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        stream_out_48_TLAST_int_regslice = 1'd0;
    end else begin
        stream_out_48_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2_01001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        stream_out_48_TUSER_int_regslice = or_ln709_1_fu_501_p2;
    end else if ((((1'b0 == ap_block_pp4_stage1_01001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_01001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage3_01001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        stream_out_48_TUSER_int_regslice = 1'd0;
    end else if ((((1'b0 == ap_block_pp3_stage0_01001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        stream_out_48_TUSER_int_regslice = stream_in_64_TUSER_int_regslice;
    end else begin
        stream_out_48_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage3_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp4_stage2_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        stream_out_48_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_48_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((grp_read_fu_136_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((grp_read_fu_136_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((grp_read_fu_136_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((grp_read_fu_136_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((grp_read_fu_136_p2 == 32'd4) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            if ((~((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1)) & (1'b0 == ap_block_pp4_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end else if (((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end
        end
        ap_ST_fsm_pp4_stage3 : begin
            if ((1'b0 == ap_block_pp4_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((regslice_both_stream_out_48_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp4_stage3 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd19];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((ap_enable_reg_pp2_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_01001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage2_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_01001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage3_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = (((ap_enable_reg_pp3_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((ap_enable_reg_pp3_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((ap_enable_reg_pp3_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = (((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_in_64_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_in_64_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_in_64_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_01001 = (((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_in_64_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = (((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_in_64_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = (((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_in_64_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

assign ap_block_pp4_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage2_01001 = (((ap_enable_reg_pp4_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp4_stage2_11001 = (((ap_enable_reg_pp4_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp4_stage2_subdone = (((ap_enable_reg_pp4_iter0 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0))) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0)));
end

assign ap_block_pp4_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage3_01001 = ((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp4_stage3_11001 = ((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp4_stage3_subdone = ((ap_enable_reg_pp4_iter0 == 1'b1) & (stream_out_48_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter0 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp2_stage1_iter0 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp2_stage2_iter0 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp2_stage3_iter0 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp2_stage0_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state17_pp3_stage0_iter0 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state18_pp3_stage0_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state20_pp4_stage0_iter0 = (stream_in_64_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state21_pp4_stage1_iter0 = (stream_in_64_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp4_stage2_iter0 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state23_pp4_stage3_iter0 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state24_pp4_stage0_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp4_stage1_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state26_pp4_stage2_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter0 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_64_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp1_stage1_iter0 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp1_stage0_iter1 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_188_p1 = stream_in_64_TLAST_int_regslice;

assign grp_fu_193_p4 = {{stream_in_64_TDATA_int_regslice[31:24]}};

assign grp_fu_203_p4 = {{stream_in_64_TDATA_int_regslice[23:16]}};

assign grp_fu_213_p4 = {{stream_in_64_TDATA_int_regslice[15:8]}};

assign grp_read_fu_136_p2 = mode_0_data_reg;

assign last_4_fu_514_p2 = (or_ln28_fu_508_p2 | empty_17_reg_664_4);

assign or_ln28_fu_508_p2 = (stream_in_64_TLAST_int_regslice | empty_reg_653_4);

assign or_ln709_1_fu_501_p2 = (or_ln709_fu_495_p2 | empty_reg_653_3);

assign or_ln709_fu_495_p2 = (stream_in_64_TUSER_int_regslice | empty_17_reg_664_3);

assign p_Result_1_fu_438_p4 = {{stream_in_64_TDATA_int_regslice[55:32]}};

assign p_Result_25_1_fu_534_p3 = {{trunc_ln674_1_reg_670}, {reg_289}};

assign p_Result_25_2_fu_542_p3 = {{trunc_ln674_2_reg_690}, {tmp_2_reg_675}};

assign p_Result_33_1_fu_398_p5 = {{{{{{16'd0}, {p_Result_32_1_reg_613}}}, {16'd0}}}, {p_Result_30_1_reg_608}};

assign p_Result_33_2_fu_409_p5 = {{{{{{16'd0}, {reg_285}}}, {16'd0}}}, {p_Result_30_2_reg_618}};

assign p_Result_33_3_fu_421_p5 = {{{{{{16'd0}, {reg_277}}}, {16'd0}}}, {reg_281}};

assign p_Result_3_fu_297_p6 = {{{{{grp_fu_193_p4}, {grp_fu_213_p4}}, {grp_fu_203_p4}}, {grp_fu_193_p4}}, {trunc_ln674_6_fu_293_p1}};

assign p_Result_46_1_fu_312_p6 = {{{{{reg_277}, {reg_285}}, {reg_281}}, {reg_277}}, {reg_273}};

assign p_Result_5_fu_375_p5 = {{{{{{16'd0}, {grp_fu_213_p4}}}, {16'd0}}}, {trunc_ln674_4_fu_371_p1}};

assign p_Result_7_fu_331_p4 = {{stream_in_64_TDATA_int_regslice[31:16]}};

assign p_Result_s_fu_448_p3 = {{p_Result_1_fu_438_p4}, {trunc_ln674_3_fu_434_p1}};

assign stream_in_64_TREADY = regslice_both_stream_in_64_V_data_V_U_ack_in;

assign stream_out_48_TVALID = regslice_both_stream_out_48_V_data_V_U_vld_out;

assign tmp_4_fu_341_p4 = {{{p_Result_7_fu_331_p4}, {8'd0}}, {trunc_ln674_5_fu_327_p1}};

assign tmp_5_fu_356_p4 = {{{reg_289}, {8'd0}}, {reg_273}};

assign trunc_ln674_1_fu_461_p1 = stream_in_64_TDATA_int_regslice[31:0];

assign trunc_ln674_2_fu_520_p1 = stream_in_64_TDATA_int_regslice[15:0];

assign trunc_ln674_3_fu_434_p1 = stream_in_64_TDATA_int_regslice[23:0];

assign trunc_ln674_4_fu_371_p1 = stream_in_64_TDATA_int_regslice[7:0];

assign trunc_ln674_5_fu_327_p1 = stream_in_64_TDATA_int_regslice[15:0];

assign trunc_ln674_6_fu_293_p1 = stream_in_64_TDATA_int_regslice[15:0];

assign trunc_ln674_fu_457_p1 = stream_in_64_TDATA_int_regslice[47:0];

assign zext_ln414_1_fu_366_p1 = tmp_5_fu_356_p4;

assign zext_ln414_fu_351_p1 = tmp_4_fu_341_p4;

endmodule //pixel_unpack_2
